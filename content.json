[{"title":"Linux 下连接蓝牙设备","date":"2020-04-12T08:14:48.000Z","path":"posts/1977779135/","text":"使用蓝牙过程 启动蓝牙； 扫描可用的蓝牙设备； 连接蓝牙设备（经过测试，在使用蓝牙鼠标不需要连接，扫描后直接与之配对即可）； 配对蓝牙设备。 蓝牙管理工具：bluetoothctl此处以连接蓝牙鼠标为例说明： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117$ sudo -i# 启动蓝牙管理工具# bluetoothctl[NEW] Controller 4C:34:88:94:D7:C4 yinkai-ThinkPad-X250 [default][NEW] Device D0:16:B4:4D:47:9D Yinkai-Honor10[bluetooth]# helpAvailable commands: list List available controllers show [ctrl] Controller information select &lt;ctrl&gt; Select default controller devices List available devices paired-devices List paired devices power &lt;on/off&gt; Set controller power pairable &lt;on/off&gt; Set controller pairable mode discoverable &lt;on/off&gt; Set controller discoverable mode agent &lt;on/off/capability&gt; Enable/disable agent with given capability default-agent Set agent as the default one set-scan-filter-uuids [uuid1 uuid2 ...] Set scan filter uuids set-scan-filter-rssi [rssi] Set scan filter rssi, and clears pathloss set-scan-filter-pathloss [pathloss] Set scan filter pathloss, and clears rssi set-scan-filter-transport [transport] Set scan filter transport set-scan-filter-clear Clears discovery filter. scan &lt;on/off&gt; Scan for devices info [dev] Device information pair [dev] Pair with device trust [dev] Trust device untrust [dev] Untrust device block [dev] Block device unblock [dev] Unblock device remove &lt;dev&gt; Remove device connect &lt;dev&gt; Connect device disconnect [dev] Disconnect device list-attributes [dev] List attributes select-attribute &lt;attribute&gt; Select attribute attribute-info [attribute] Select attribute read Read attribute value write &lt;data=[xx xx ...]&gt; Write attribute value notify &lt;on/off&gt; Notify attribute value register-profile &lt;UUID ...&gt; Register profile to connect unregister-profile Unregister profile version Display version quit Quit program[bluetooth]# showController 4C:34:88:94:D7:C4 Name: yinkai-ThinkPad-X250 Alias: yinkai-ThinkPad-X250 Class: 0x000000 Powered: yes Discoverable: yes Pairable: yes UUID: Headset AG (00001112-0000-1000-8000-00805f9b34fb) UUID: Generic Attribute Profile (00001801-0000-1000-8000-00805f9b34fb) UUID: A/V Remote Control (0000110e-0000-1000-8000-00805f9b34fb) UUID: OBEX File Transfer (00001106-0000-1000-8000-00805f9b34fb) UUID: Generic Access Profile (00001800-0000-1000-8000-00805f9b34fb) UUID: OBEX Object Push (00001105-0000-1000-8000-00805f9b34fb) UUID: PnP Information (00001200-0000-1000-8000-00805f9b34fb) UUID: A/V Remote Control Target (0000110c-0000-1000-8000-00805f9b34fb) UUID: IrMC Sync (00001104-0000-1000-8000-00805f9b34fb) UUID: Audio Sink (0000110b-0000-1000-8000-00805f9b34fb) UUID: Audio Source (0000110a-0000-1000-8000-00805f9b34fb) UUID: Vendor specific (00005005-0000-1000-8000-0002ee000001) UUID: Message Notification Se.. (00001133-0000-1000-8000-00805f9b34fb) UUID: Phonebook Access Server (0000112f-0000-1000-8000-00805f9b34fb) UUID: Message Access Server (00001132-0000-1000-8000-00805f9b34fb) Modalias: usb:v1D6Bp0246d0525 Discovering: no# 查看可用的蓝牙设备[bluetooth]# devices Device D0:16:B4:4D:47:9D Yinkai-Honor10# 重启蓝牙设备[bluetooth]# power off Changing power off succeeded[CHG] Controller 4C:34:88:94:D7:C4 Powered: no[CHG] Controller 4C:34:88:94:D7:C4 Discovering: no[bluetooth]# power onChanging power on succeeded[CHG] Controller 4C:34:88:94:D7:C4 Powered: yes# 扫描可用的蓝牙设备[bluetooth]# scan onDiscovery started[CHG] Controller 4C:34:88:94:D7:C4 Discovering: yes[NEW] Device CF:D0:F4:9B:8D:F7 M720 Triathlon[NEW] Device 22:22:58:10:EB:91 M8S PRO L[NEW] Device C8:28:32:0D:AB:5E MI BT18 BLE[CHG] Device CF:D0:F4:9B:8D:F7 RSSI: -59[CHG] Device CF:D0:F4:9B:8D:F7 RSSI: -48# 停止扫描[bluetooth]# scan off[CHG] Device C8:28:32:0D:AB:5E RSSI is nil[CHG] Device 22:22:58:10:EB:91 RSSI is nil[CHG] Device CF:D0:F4:9B:8D:F7 RSSI is nilDiscovery stopped# 再次查看可用的蓝牙设备[bluetooth]# devices Device D0:16:B4:4D:47:9D Yinkai-Honor10Device CF:D0:F4:9B:8D:F7 M720 TriathlonDevice 22:22:58:10:EB:91 M8S PRO LDevice C8:28:32:0D:AB:5E MI BT18 BLE# 配对蓝牙设备（设备地址）[bluetooth]# pair CF:D0:F4:9B:8D:F7Attempting to pair with CF:D0:F4:9B:8D:F7[CHG] Device CF:D0:F4:9B:8D:F7 Connected: yes[CHG] Device CF:D0:F4:9B:8D:F7 Paired: yesPairing successful[CHG] Device CF:D0:F4:9B:8D:F7 Modalias: usb:v046DpB015d0009[DEL] Device 22:22:58:10:EB:91 M8S PRO L[DEL] Device C8:28:32:0D:AB:5E MI BT18 BLE[M720 Triathlon]# exit","tags":[{"name":"bluetoothctl","slug":"bluetoothctl","permalink":"http://blog.yinkai.me/tags/bluetoothctl/"},{"name":"蓝牙","slug":"蓝牙","permalink":"http://blog.yinkai.me/tags/%E8%93%9D%E7%89%99/"}]},{"title":"Markdown语法介绍","date":"2020-04-12T08:09:26.000Z","path":"posts/2392901311/","text":"一、标题这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题二、字体这是加粗的文字这是倾斜的文字`这是斜体加粗的文字这是加删除线的文字 字体颜色浅红色文字：浅红色文字：深红色文字：深红色文字浅绿色文字：浅绿色文字深绿色文字：深绿色文字浅蓝色文字：浅蓝色文字深蓝色文字：深蓝色文字浅黄色文字：浅黄色文字深黄色文字：深黄色文字浅青色文字：浅青色文字深青色文字：深青色文字浅紫色文字：浅紫色文字深紫色文字：深紫色文字 大小size为1：size为1size为2：size为2size为3：size为3size为4：size为4size为10：size为10 三、分割线 四、引用 这是引用的内容 这是引用的内容 这是引用的内容 五、图片六、代码单行代码多行代码1print(&#39;Hello World&#39;) 语法说明插入程序代码的方式有两种：使用反引号 `（~ 键）、使用缩进（Tab）。 插入行内代码，即插入一个单词或者一句代码的情况，使用 code 这样的形式插入。 插入多行代码，分别使用三个反引号（```）包裹多行代码。或者使用缩进。 行内代码在一般的段落文字中，可以使用反引号来标记或插入代码区段。示例：C语言里的函数 scanf() 怎么使用？ create database DATABASE_NAME; 多行代码在需要高亮的代码块的前一行及后一行使用三个反引号 ```（~ 键），同时第一行反引号后面，输入码块所使用的语言，实现代码高亮。比如高亮 python3 代码块： 1234 #!/usr/bin/env python3class PrintHello: print(\"Hello, World!\"); 缩进式插入多行代码注意： 缩进式插入前方必须有空行； 缩进 4 个空格或是 1 个制表符； 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。代码： 12345#include &lt;stdio.h&gt;`int main(void)`&#123; printf(\"Hello world\\n\");&#125; 七、超链接八、表格九、列表：无序列表语法：无序列表用 - + * 任何一种都可以 列表内容 列表内容 列表内容 注意：- + * 跟内容之间都要有一个空格 有序列表语法： 数字加点 列表内容 列表内容 列表内容 注意：序号跟内容之间要有空格 列表嵌套上一级和下一级之间敲三个空格即可： 一级无序列表内容 二级无序列表内容 三级无序列表内容 十、流程图","tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://blog.yinkai.me/tags/Markdown/"}]},{"title":"Hello Hexo","date":"2020-04-11T09:36:45.000Z","path":"posts/2708806665/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://blog.yinkai.me/tags/Hexo/"}]},{"title":"使用SSL/TSL证书加密通讯过程","date":"2016-10-26T05:14:02.000Z","path":"posts/3697389350/","text":"本文以Bob和Alice安全通讯为例说明 Bob&lt;———&gt;Alice 1. 验证证书Bob要和Alice安全通信首先要取得对方的公钥，即对方的证书，并验证证书的合法性。验证过程和内容如下： 1）、用CA的公钥（双方已知）解密对方证书中CA的签名；能解密说明证书来原可靠； 2）、用证书中标记的“签名算法”来计算证书的相关信息，并将散列计算的结果与证书“发行者签名”解密的结果（证书特征码）进行比较，如果一致说明证书完整性可靠； 3）、检查证书的有效期限是否在合法范围内，防止证书过期； 4）、验证证书的 “主体名称” 和预通信的人是否对应； 5）、检查证书是否被吊销； 以上验证成功则说明对方证书可靠，并信任该证书。 取得对方证书（即公钥）后进行如下操作： 2. 加密1)、Bob对明文数据进行散列计算，提取出数据指纹（特征码，也叫信息摘要）； 2)、Bob使用自己的私钥对该数据指纹进行加密，生成数字签名，并将该数字签名附加在明文数据之后； 3)、Bob使用一个一次性的对称加密算法密钥对明文和数字签名进行加密，生成密文； 4)、Bob再使用Alice的公钥对对称加密算法的密钥进行加密，生成数字信封； 5)、Bob将密文和数字信封打包发送给Alice； 3. 解密1)、Alice收到数据（密文+数字信封）后，使用自己的私钥解密数字信封，得到对称加密算法的密钥； 2)、使用对称加密密钥解密密文，得到明文数据和数字签名。保证了数据的私密性； 3)、使用Bob的公钥解密数字签名，得到明文的数据指纹（特征码）。如果能解出，说明数据为Bob发送，保证了数据的不可否认性； 4)、Alice使用同样的散列算法对明文计算得出数据指纹（特征码），并与Bob计算的数据指纹进行比对，如果一致，说明数据没有被篡改。保证了数据的完整性. 使用SSL/TSL证书加密通讯示意图","tags":[{"name":"SSL/TLS","slug":"SSL-TLS","permalink":"http://blog.yinkai.me/tags/SSL-TLS/"},{"name":"加密","slug":"加密","permalink":"http://blog.yinkai.me/tags/%E5%8A%A0%E5%AF%86/"},{"name":"安全","slug":"安全","permalink":"http://blog.yinkai.me/tags/%E5%AE%89%E5%85%A8/"}]},{"title":"在Linux下创建并使用私有CA为客户端颁发证书","date":"2016-10-25T05:55:43.000Z","path":"posts/2939447081/","text":"应用服务器在使用证书前需向RA（证书注册机构）提出申请，RA对申请人信息进行核验，核验成功后由CA进行签署并生成证书。为了保证CA签署的证书可信，CA在签署客户证书前需要先生成自签证书，客户端会使用CA的证书来验证CA所签署的证书。 证书颁发过程 申请人向RA递交证书申请； RA会要求申请人递交自己的公钥和其它相关信息； RA核验该申请方的真实信息； 核验通过后，RA会将请求转交给CA进行签署。由CA对这些信息进行散列，并用自己的私钥对散列结果进行加密，生成数字签名； 将申请方的信息和数字签名一起封装到证书内，颁发给申请人； 证书申请及签署实例 使用自建CA签署证书时CA和RA可合并 工具：OpenSSL 操作过程: 构建私有CA： (1) 检查安装openssl; (2) 根据openssl的配置文件（/etc/pki/tls/openssl.cnf）创建所需要的文件； 12# touch /etc/pki/CA/index.txt #创建证书索引文件# echo 01 &gt; /etc/pki/CA/serial #设置证书的序列号 (3) 自签证书： 1234567891011121314151617# (umask 077; openssl genrsa -out /etc/pki/CA/private/cakey.pem 2048) #生成CA的私钥# openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 3650 -out /etc/pki/CA/cacert.pem #生成自签证书签署请求，只有在生成自签证书时使用-x509选项You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter '.', the field will be left blank.-----Country Name (2 letter code) [XX]:CNState or Province Name (full name) []:BeijingLocality Name (eg, city) [Default City]:BeijingOrganization Name (eg, company) [Default Company Ltd]:YinkaiOrganizational Unit Name (eg, section) []:OpsCommon Name (eg, your name or your server's hostname) []:ca.yinkai.site Email Address []:caadmin@yinkai.site 为客户端签发证书： (1) 客户端提交证书签署请求： 1234567891011121314151617181920# (umask 077; openssl genrsa -out /etc/httpd/ssl/httpd.key 2048) #客户端生成私钥# openssl req -new -key /etc/httpd/ssl/httpd.key -days 365 -out /etc/httpd/ssl/httpd.csr #客户端生成证书签署请求文件 You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter '.', the field will be left blank.-----Country Name (2 letter code) [XX]:CNState or Province Name (full name) []:BeijingLocality Name (eg, city) [Default City]:BeijingOrganization Name (eg, company) [Default Company Ltd]:YinkaiOrganizational Unit Name (eg, section) []:TechCommon Name (eg, your name or your server's hostname) []:www.yinkai.site #此处的公共名需与实际使用的服务器访问名称一致Email Address []:caadmin@yinkai.sitePlease enter the following 'extra' attributesto be sent with your certificate requestA challenge password []:An optional company name []: (2) 将证书签署请求发给RA（此处RA与CA一致）: 1# scp /etc/httpd/ssl/httpd.csr root@192.168.1.71:/tmp (3) CA签署请求： 123456789101112131415161718192021222324252627282930# openssl ca -in /tmp/httpd.csr -days 365 -out /etc/pki/CA/certs/httpd.crtUsing configuration from /etc/pki/tls/openssl.cnfCheck that the request matches the signatureSignature okCertificate Details: Serial Number: 1 (0x1) Validity Not Before: Oct 29 06:53:10 2016 GMT Not After : Oct 29 06:53:10 2017 GMT Subject: countryName = CN stateOrProvinceName = Beijing organizationName = Yinkai organizationalUnitName = Tech commonName = www.yinkai.site emailAddress = caadmin@yinkai.site X509v3 extensions: X509v3 Basic Constraints: CA:FALSE Netscape Comment: OpenSSL Generated Certificate X509v3 Subject Key Identifier: 4B:08:90:15:E3:FE:E2:44:AF:BD:C2:79:F9:13:4A:B8:FB:70:BF:4A X509v3 Authority Key Identifier: keyid:32:43:7A:30:8C:2E:22:87:85:63:04:F1:37:D4:8C:4D:3B:41:10:B8Certificate is to be certified until Oct 29 06:53:10 2017 GMT (365 days)Sign the certificate? [y/n]:y1 out of 1 certificate requests certified, commit? [y/n]yWrite out database with 1 new entriesData Base Updated (4) 将证书发送给请求客户端： 1# scp /etc/pki/CA/certs/httpd.crt root@192.168.1.61:/etc/httpd/ssl/","tags":[{"name":"SSL/TLS","slug":"SSL-TLS","permalink":"http://blog.yinkai.me/tags/SSL-TLS/"},{"name":"安全","slug":"安全","permalink":"http://blog.yinkai.me/tags/%E5%AE%89%E5%85%A8/"},{"name":"CA","slug":"CA","permalink":"http://blog.yinkai.me/tags/CA/"},{"name":"证书","slug":"证书","permalink":"http://blog.yinkai.me/tags/%E8%AF%81%E4%B9%A6/"}]},{"title":"Web Service","date":"2016-05-14T09:09:49.000Z","path":"posts/895680827/","text":"","tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.yinkai.me/tags/Linux/"},{"name":"Socket","slug":"Socket","permalink":"http://blog.yinkai.me/tags/Socket/"},{"name":"Web","slug":"Web","permalink":"http://blog.yinkai.me/tags/Web/"},{"name":"URI","slug":"URI","permalink":"http://blog.yinkai.me/tags/URI/"},{"name":"URL","slug":"URL","permalink":"http://blog.yinkai.me/tags/URL/"}]}]